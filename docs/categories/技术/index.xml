<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on 龙舍·嬴皇志 - 透过我的双眼看世界</title>
    <link>https://lsvking.github.io/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on 龙舍·嬴皇志 - 透过我的双眼看世界</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Mon, 05 Sep 2016 15:41:13 +0000</lastBuildDate><atom:link href="https://lsvking.github.io/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MongoDB用mongoimport 导入大文件报错解决方案</title>
      <link>https://lsvking.github.io/1152/</link>
      <pubDate>Mon, 05 Sep 2016 15:41:13 +0000</pubDate>
      
      <guid>https://lsvking.github.io/1152/</guid>
      <description>用Mongoexport 可以很方便的导出一个集合到Json格式 同时也可以用MongoImport 将数据导入进去,之前用的时候都没有导入太大的文件，大的数据迁移都是用的restore导入的。这次遇到一次数据迁移导出的json 文件大概有4.7G左右,再倒入的时候出现了问题
mongoimport -h127.0.0.1 -d database -c indexs &amp;lt; indexs.dat
却出现了如下的错误提示
2016-09-05T23:30:35.773+0800	connected to: 127.0.0.1 2016-09-05T23:30:37.653+0800	Failed: lost connection to server 2016-09-05T23:30:37.653+0800	imported 0 documents  Mongo的错误提示也是醉了，这也忒不友好了, 完全是再猜,不过通过万能的大G还是搜到了解决方案,原来是因为Mongo对单次处理好像有大小限制（16m）好像是，所以大文件会出问题,这应该是个Bug mongoimport 默认会10000条 为一个批量导入数据，但实际上我的单条数据太大了,每51条数据就达到了16m 所以10000条导入一次肯定是不行的。幸好他有个参数 &amp;ndash;batchSize 可以指定每次批量导入的条数 设置小一些就OK了。
mongoimport -h127.0.0.1 -d database -c indexs &amp;lt; indexs.dat --batchSize 1
这样你会看到他会分开执行导入任务
2016-09-05T23:12:48.622+0800	connected to: 127.0.0.1 2016-09-05T23:12:51.632+0800	d.indexs_value	42.6 MB 2016-09-05T23:12:54.626+0800	d.indexs_value	79.4 MB 2016-09-05T23:12:57.607+0800	d.indexs_value	115.9 MB 2016-09-05T23:13:00.618+0800	d.indexs_value	151.5 MB   </description>
    </item>
    
    <item>
      <title>vagrant 打包box时候提示 “VM not created. Moving on…”</title>
      <link>https://lsvking.github.io/1134/</link>
      <pubDate>Thu, 13 Nov 2014 09:48:10 +0000</pubDate>
      
      <guid>https://lsvking.github.io/1134/</guid>
      <description>在使用vagrant 打包我本地的虚拟机的时候,提示 “VM not created. Moving on…”，折腾半天发现原来是名字大小写弄错了。。
vagrant package --base ubuntu --output ubuntu.box ubuntu: VM not created. Moving on...  
名称要完全一样，大小写也要一样哦。折腾了半天，也是醉了。。</description>
    </item>
    
    <item>
      <title>VirtualBox OS X Mavericks 分辨率修改</title>
      <link>https://lsvking.github.io/951/</link>
      <pubDate>Wed, 30 Jul 2014 10:16:11 +0000</pubDate>
      
      <guid>https://lsvking.github.io/951/</guid>
      <description>需要开启EFI模式 然后在命令行下 VirtualBox目录 输入一下命令：
VBoxManage setextradata &amp;quot;虚拟机名称&amp;quot; VBoxInternal2/EfiGopMode N
其中 N 可以是 0,1,2,3,4,5 其中一个，分别代表 640×480, 800×600, 1024×768, 1280×1024, 1440×900, 1920×1200 几种分辨率</description>
    </item>
    
    <item>
      <title>利用cloudHQ在网盘间快速拷贝和同步文件</title>
      <link>https://lsvking.github.io/944/</link>
      <pubDate>Wed, 12 Mar 2014 17:11:16 +0000</pubDate>
      
      <guid>https://lsvking.github.io/944/</guid>
      <description>现在网盘服务越来越多，可能不少人都拥有多个网盘。有时需要将一个网盘的文件转移到另一个网盘，我们一般会现将源文件从网盘下载到本地，然后再上传到另一个网盘。每个文件都需要经过本地中转，如果文件数目多或体积大，加上国内网速不给力，这个操作将非常耗时。拷贝操作尚且如此麻烦，网盘间文件的同步操作就更繁琐了。 幸好已经有厂商看到了这个市场并推出了相应的服务，cloudHQ就是其中一家。cloudHQ主要提供以下几种服务：
1、网盘综合管理，你可以将常用的网盘添加到cloudHQ，通过cloudHQ管理所有网盘的文件；
2、网盘间文件拷贝/移动；
3、网盘间文件的同步(这是cloudHQ的主打功能)。
cloudHQ的注册非常简单，打开 https://cloudHQ.net?r=9rel，直接使用Google帐号注册，免费用户可以试用14天。cloudHQ目前支持Dropbox、SugarSync、Box.net、Google Drive等几种常用的网盘，还支持Evernote笔记本。
注册完成后就自动转到同步向导，在这里可以添加一对同步的网盘，并可选择单向还是双向同步。
添加完成后的网盘可以在Browse标签卡下进行管理，cloudHQ的这个文件管理器非常不错，在这里可以方便地查看网盘容量以及完成对网盘的文件上传/下载/删除等管理操作。在网盘间拷贝和移动文件也是非常简单的，由于使用cloudHQ的服务器中转，速度非常不错。当然，对于网盘间大量文件的拷贝，建议使用cloudHQ的同步功能来实现。
cloudHQ的同步速度还是不错的，我从Dropbox同步了7G的数据共6000多个文件到Box.net，大概用了3个小时。cloudHQ还会自动将Box.net不支持的文件比如点开头的文件重命名，从而避免文件缺失。</description>
    </item>
    
    <item>
      <title>【转发】关于MySQL表设计应该注意的问题</title>
      <link>https://lsvking.github.io/921/</link>
      <pubDate>Wed, 09 Mar 2011 06:39:56 +0000</pubDate>
      
      <guid>https://lsvking.github.io/921/</guid>
      <description>如有错误欢迎大家指出。这段时间在家里，做了点修正。
1、慎重选择表名。
有两种选择：
按照多数开发语言的命名规则。比如（myCustomer）。
按照多数开源思想命名规则。比如（my_customer）。
按照咱们中国人的思想。比如（我的客户）。
第一种有个缺点，很容易忘掉大写的字母。
第二种则比较好，每个WORD间用下划线连接，避免遗忘。
第三种建议不要用，虽然很好记。不觉得解析这个表的时候还需要编码转化吗？我个人理解，大家可以补充。
2. 关于编码的设定。****
A． GBK/GB2312.（适用于纯中文存储）。
B． UTF8.（适用于中英文混合存储）。
C． LATIN1。（适用于纯英文存储）。
D. 其他的。
3. 关于表引擎的选择。****
A. MYISAM.（很多人说她的表级锁定会带来好多问题，其实只要设计好对应的表以及写好对应的SQL查询就没有那么大的问题。）
B. INNODB. （如果要用到事务，选择她不会错。至于多数人讲的MASTER/SLAVE结构上用INNODB在MASTER的选择是否正确，就要看你怎么用了。不能一味的疯狂使用INNODB。除非你想要确保非常高可用性，
）
C. CSV. （以前我写过文章，关于这个引擎。个人觉得最主要的是来存储少量数据以及从EXCEL到MYSQL的转换方面会很有用。当然只要涉及到规则数据的导入，她就可以办到。）
D. BLACKHOLE. （觉得最完美的用处在于MASETR/SLAVE上面，并且MASTER是一个临时的专门负责写的机器。不过缺点也很多，会与MYISAM或者INNODB或者其他的引擎有所冲突，这点自己要做个权衡）。
E. MEMORY. （应该说是MYISAM的兄弟了。不过在读内存总比读磁盘的速度要快。不过要注意，它不支持动态数据类型）。
F. FEDERATED. （典型的分布式引擎。我以前文章中有介绍。）
G. NDB。（网络版存储引擎。因为Replication 总是有延迟，所以如果系统容不得任何延迟，就用这个吧。）
H. FOLCON。（6.0后用来代替INNODB的引擎。）
I. 其他旧的以及新开发的引擎具体介绍：http://dev.mysql.com/doc/refman/6.0/en/storage-engines.html）。
4. 关于属性数据类型的选择。****
A. INT（一个字节的TINYINT，两个字节的SMALLINT，三个字节的MEDIUMINT，四个字节的INT，8个字节的BIGINT。记住：UNSIGNED不管你定义或者不定义，都不影响内部的存储字节大小）
B. 少于10个字符用CHAR是在合适不过了。（不过要记住在MEMORY引擎里面会自动把VARCHAR转化为CHAR）
C. 我一般用DECIMAL或者NUMERIC来代替FLOAT 或者DOUBLE。因为老板要求精确的数字。如果不要求精确的，那就用FLOAT吧。速度快，占空间小。（DECIMA、FLOAT(P)是动态存储。比如:DECIMAL(10,2)占用5个字节。FLOAT占4个字节，）
D. BLOB，TEXT,VARCHAR（一般存放文章内容，特别是新闻网站。需要的字节数是所存储的字符长度+1。记住BLOB和VARCHAR是TEXT和CHAR的BINARY类型）
E. ENUM（在一定范围内绝佳的代替VARCHAR和CHAR的工具，因为她只占一到两个字节。）
F. 时间和日期类型（占3个字节的DATE，8个字节的DATETIME，4个字节的TIMESTAMP，3个字节的TIME，1个字节的YEAR。）。如果要存储比如‘1983’这样的年份，用YEAR明显比VARCHAR或者CHAR要节省空间。因为后者要占5个字节。
G. BOOLEAN（用来存储YES或者NO之类的值，占用一个字节。）
H. 关于自增字段。目前我们的项目中涉及到好多ORDER BY RAND()操作。此类语句在数据库并发大的时候会造成CPU严重阻塞，持续产生数据库死锁！解决此类问题最好的办法就是利用自增字段，用程序随即生成数字序列，或者在数据库端随即生成数字序列。
I. 关于ZEROFILL。非常好用的前置填补0的存储，而不是用用对应个数的空串来代替。在需要前置补零的操作中INT ZEROFILL可以用来代替CHAR或者VARCHR。</description>
    </item>
    
    <item>
      <title>用CI的 AR类进行 跨库关联查操作</title>
      <link>https://lsvking.github.io/917/</link>
      <pubDate>Tue, 26 Oct 2010 05:15:49 +0000</pubDate>
      
      <guid>https://lsvking.github.io/917/</guid>
      <description>比较早写的东西了,发现博客很急没更新了发过来充数。。。
最近在写套系统，上来就遇到麻烦了，具体情况就不说了，大概就是 A 库里有张表 写了一些用户信息，B 库是另外一个库，里边有张表记录了一些充值信息， 然后A 表里的用户有个字段是B表里没有的，但却是查询条件，所以要用到表关联。这个逻辑大家都清楚，主要是这两个表分布在了不同的数据库中，需要用到跨库表关联，这个在MYSQL里边是可以实现的，现在需要用CI 的AR类来实现，好下边给出解决方法，期间我走的弯路就不说了，希望能够帮助大家，让大家少走弯路。
&amp;lt;br /&amp;gt; //多表信息查询//&amp;lt;br /&amp;gt; function cps_pay_in_dede(){
``
$DB2 = $this-&amp;gt;load-&amp;gt;database(&#39;dedecms&#39;, TRUE);&amp;lt;br /&amp;gt; $this-&amp;gt;db-&amp;gt;select(&#39;un_cps.mid,un_cps.unionid,dede_shops_orders.userid,dede_shops_orders.priceCount,stime&#39;);&amp;lt;br /&amp;gt; $this-&amp;gt;db-&amp;gt;from($this-&amp;gt;db-&amp;gt;database.&#39;.un_cps&#39;);&amp;lt;br /&amp;gt; $this-&amp;gt;db-&amp;gt;join($DB2-&amp;gt;database.&#39;.dede_shops_orders&#39;, &#39;un_cps.mid = dede_shops_orders.userid&#39;,&#39;left&#39;);&amp;lt;br /&amp;gt; $this-&amp;gt;db-&amp;gt;where(&#39;un_cps.unionid&#39;, &#39;2&#39;);&amp;lt;br /&amp;gt; $this-&amp;gt;db-&amp;gt;where(&#39;dede_shops_orders.priceCount IS NOT NULL&#39;);&amp;lt;br /&amp;gt; //$this-&amp;gt;db-&amp;gt;select_sum(&#39;priceCount&#39;);&amp;lt;br /&amp;gt; return $this-&amp;gt;db-&amp;gt;get();&amp;lt;br /&amp;gt;
我就直接用我的model 方法了，大家看一下吧，DB2 是写在数据库配置文件里的另一组配置 ，具体的去看手册里连接多数据库章节 http://codeigniter.org.cn/user_guide/database/connecting.html。 恩，这个方法在CI的官方英文论坛里边有，而且解决这个问题的方法有很多，这个是我试用成功的。 本人表达能力有限，就写这么多吧，有不清楚的直接留言，要不到QQ群找我也行</description>
    </item>
    
    <item>
      <title>68KB Knowledge Base 中文语言文件</title>
      <link>https://lsvking.github.io/905/</link>
      <pubDate>Wed, 28 Apr 2010 08:38:41 +0000</pubDate>
      
      <guid>https://lsvking.github.io/905/</guid>
      <description>68KB Knowledge Base 是一款类似于FAQ等知识库类的PHP开源程序，基于Codeigniter开源框架编写的，我制作了个中文版的语言文件，有些地方难免有些生硬，请指出。</description>
    </item>
    
    <item>
      <title>谈谈HMVC。。。。</title>
      <link>https://lsvking.github.io/794/</link>
      <pubDate>Mon, 21 Dec 2009 05:32:52 +0000</pubDate>
      
      <guid>https://lsvking.github.io/794/</guid>
      <description>&lt;p&gt;最近在写东西，看到有些HMVC的教程，于是就花了些时间去了解了一下，下边就来谈一谈。&lt;/p&gt;
&lt;p&gt;HMVC(Hierarchical-Model-View-Controller)，故名思意，就是按等级划分的MVC模式，MVC我想不必多解释了，至于什么叫做按等级划分的，我们来看几张图就明白了。&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;alignnone size-full wp-image-797&#34; title=&#34;jw0721hmvc1&#34; src=&#34;http://lsvking.github.io/wp-content/uploads/2009/12/jw0721hmvc14.gif&#34; alt=&#34;jw0721hmvc1&#34; width=&#34;425&#34; height=&#34;264&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>彻底优化让Firefox不再卡</title>
      <link>https://lsvking.github.io/327/</link>
      <pubDate>Fri, 14 Nov 2008 14:45:06 +0000</pubDate>
      
      <guid>https://lsvking.github.io/327/</guid>
      <description>&lt;p&gt;Firefox是Linux用户首选的浏览器，对其不作过多的介绍。只要看看LDCN的访客留言就知道他的流行程度了。&lt;/p&gt;
&lt;p&gt;Firefox虽然是一款优秀的浏览器，但是不免还有些不足。对我而言，最大的不足就是其性能，简单的说，刚开始用很流畅，用久了，会越用越卡。&lt;/p&gt;
&lt;p&gt;今天琢磨了一下Firefox，分析下Firefox卡的原因，并通过设定相关参数解决了这个问题。从此上网变得更加畅快！&lt;/p&gt;
&lt;p&gt;—–&lt;/p&gt;
&lt;p&gt;我的Firefox用户目录（~/.mozilla/firefox）是从Ubuntu 7.10时开始建立的，前前后后用过十几个插件，经历了从Firefox 2到Firefox 3，从Ubuntu 7.10到Ubuntu 8.04。&lt;/p&gt;
&lt;p&gt;在Ubuntu 7.10的Firefox 2时，就遇到卡的问题，常常界面灰掉。&lt;/p&gt;
&lt;p&gt;等到Ubuntu 8.04的Firefox 3，情况好一点，但是还是卡。后来我用极致编译参数编译了回Firefox 3.0，情况好了点，地址栏反应快了一点点，仅此而已。关闭Firefox的时候，还是会有很长的停顿时间，有时还卡死。&lt;/p&gt;
&lt;p&gt;虽然重新建立用户目录会解决问题（即把~/.mozilla/firefox删除掉），但是相当多的资料/插件要重来，这个代价受不了，所以还得从Firefox本身动手脚。&lt;/p&gt;
&lt;p&gt;查阅了相关资料，终于发现是由“历史访问”和“位置”引起的。&lt;/p&gt;
&lt;p&gt;这个可不是我们能看到的“历史记录”和“地址栏”的已访问纪录，而是数据层面的。&lt;/p&gt;
&lt;p&gt;让我们来看看，你的数据是不是过大了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查到数据库的大小&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;来到~/.mozilla/firefox/***.default（因人而异），下面有一个places.sqlite文件，看看它的大小。如果超过了10MB，理论上就能引起Firefox卡了。像我是21MB，一般用了一年左右的话，会有这个程度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CSS技巧补遗二十四则</title>
      <link>https://lsvking.github.io/308/</link>
      <pubDate>Thu, 31 Jul 2008 12:36:45 +0000</pubDate>
      
      <guid>https://lsvking.github.io/308/</guid>
      <description>在CSS网页布局开发中，会有很多小技巧，新手朋友往往对此很不熟悉。在某一两个小问题上，或许纠缠很长时间才能搞明白，虽然在52CSS.com的文档 中，多次提及过这方面的内容，但依然有很多朋友在这些问题上犯错。我们今天看看这些CSS技巧，认真读一读，或许您并不能完全理解，您可以在 52CSS.com进行搜索，扩展您所想要得到的知识，相信您会有很多收获！
一、ul标签在Mozilla中默认是有padding值的，而在IE中只有margin有值。
二、同一个的class选择符可以在一个文档中重复出现，而id选择符却只能出现一次。对一个标签同时使用class和id进行CSS定义，如果定义有重复，id选择符做的定义有效，是因为id的权重要比class大。
三、一个兼容性调整(IE和Mozilla)的笨办法：
初学可能会碰到这样一个情况：同样一个标签的属性在IE设置成A显示是正常的，而在Mozilla里必须要设成B才能正常显示，或者两个倒过来。
临时解决方法：选择符{属性名:B !important;属性名:A} 或许有时候并没有效果。你可以在52CSS.com搜索更多的BUG解决方法。
四、如果一组要嵌套的标签之间需要些间距的话，那就留给位于里面的标签的margin属性吧，而不要去定义位于外面的标签的padding
五、li标签前面的图标推荐使用background-image，而不是list-style-image。
六、IE分不清继承关系和父子关系的差别，全部都是继承关系。
七、在给你的标签疯狂加选择符的时候，别忘了在CSS里给选择符加上注释。等你以后修改你的CSS的时候就知道为什么要这么做了。另外提醒您，不要太疯狂了。
八、如果你给一个标签设置了一个深色调的背景图片和亮色调的文字效果。建议这个时候给你的标签再设置一个深色调的背景颜色。因为图片丢失了，也可以保持文字的可读性。
九、定义链接的四种状态要注意先后顺序: Link Visited Hover Active
十、与内容无关的图片请使用background。时刻记住表现与内容分离。
十一、定义颜色可以缩写#8899FF=#89F
十二、table在某些方面还是有用武之地的，在遇到内容为数据表格时，不要对它产生憎恨的心理。
十三、没有language这个属性，应该写成这样:&amp;lt;script type=”text/javascript”&amp;gt;
十四、完美的单象素外框线表格（在IE5、IE6、IE7及FF1.0.4以上中均可通过测试）
table{ border-collapse:collapse; }
td{ border:#000 solid 1px; }
您也可以参考：
与表格边框有关的CSS语法
http://www.52css.com/article.asp?id=394
CSS去除表格td默认间距及制作1px细线表格
http://www.52css.com/article.asp?id=593
实现符合Web标准的细线表格
http://www.52css.com/article.asp?id=676
十五、margin取负值可以在标签使用绝对定位的时候起到相对定位的作用，在页面居中显示时，使用绝对定位的层不适合使用left:XXpx这个属性。把这个层放到一个要相对定位的标签旁，然后使用margin的负值是个好方法。
十六、绝对定位时使用margin值定位可以达到相对于本身所在位置的定，这与top，left等属性相对与窗口边缘的定位不同。绝对定位的优势在于可以让其它元素忽略它的存在。
十七、如果文字过长,则将过长的部分变成省略号显示：IE5,FF无效，但可以隐藏，IE6有效
&amp;lt;DIV STYLE=”width:120px;height:50px;border:1px solid blue;overflow:hidden;text-overflow:ellipsis”&amp;gt;
就是比如有一行文字，很长，表格内一行显示不下.
十八、在IE中可能由于注释带来的文字重复问题时可以把注释改为：
&amp;lt;!–[if !IE]&amp;gt;Put your commentary in here…&amp;lt;![endif]–&amp;gt;
十九、如何用CSS调用外部字体
语法：
@font-face{font-family:name;src:url(url);sRules}
取值：
name：字体名称。任何可能的 font-family 属性的值
url(url)：使用绝对或相对 url 地址指定OpenType字体文件
sRules：样式表定义
二十、如何让一个表单中的文本框中的文字垂直居中？
如果用行高与高度的组在FF中是没有效果的，办法就是定义上下补白就可以实现想想的效果了。
二十一、定义A标签要注意的小问题：</description>
    </item>
    
    <item>
      <title>为simple-tags添加多彩标签云</title>
      <link>https://lsvking.github.io/283/</link>
      <pubDate>Tue, 22 Jul 2008 13:00:18 +0000</pubDate>
      
      <guid>https://lsvking.github.io/283/</guid>
      <description> 此方法来自偶爱偶家。   言归正传， 首先我的修改是针对 simple tags 这个插件的， 其他的我就不说了， 你可以参照这里的方法自己研究。   1、在simple-tags.client.php文件中查找该语句  function getColorByScale($scale_color, $min_color, $max_color)  2、注释掉上述函数中的以下语句（其实不注释掉也是无所谓的）  $scale_color = $scale_color / 100; $minr = hexdec(substr($min_color, 1, 2)); $ming = hexdec(substr($min_color, 3, 2)); $minb = hexdec(substr($min_color, 5, 2)); $maxr = hexdec(substr($max_color, 1, 2)); $maxg = hexdec(substr($max_color, 3, 2)); $maxb = hexdec(substr($max_color, 5, 2)); $r = dechex(intval((($maxr - $minr) * $scale_color) + $minr)); $g = dechex(intval((($maxg - $ming) * $scale_color) + $ming)); $b = dechex(intval((($maxb - $minb) * $scale_color) + $minb));  3、 在上述被注释掉的语句后增加如下语句（如果没有注释掉就必须加在后面， 否则无效）  //mod by hongfengye start $r = dechex(rand(0,255)); $g = dechex(rand(0,196)); $b = dechex(rand(0,255)); //mod by hongfengye end  是的， 就是这么简单， 现在你应该就可以发现你的标签云(tags cloud)已经是彩色(colorful)的了。 效果图如下：     </description>
    </item>
    
    <item>
      <title>给博客加上每日一句学英语功能！</title>
      <link>https://lsvking.github.io/262/</link>
      <pubDate>Sun, 20 Jul 2008 00:26:23 +0000</pubDate>
      
      <guid>https://lsvking.github.io/262/</guid>
      <description>在本博客右边栏最上边的那个每日一句，当鼠标划过小喇叭还会真人发音，这个其实是用了dict.cn提供的一个小工具，应用起来很简单，将
Dict.CN 在线词典, 英语学习, 在线翻译   这段代码放到Widgets，文本块里就行了！</description>
    </item>
    
    <item>
      <title>《龟虽寿》-竖文插件。</title>
      <link>https://lsvking.github.io/237/</link>
      <pubDate>Fri, 18 Jul 2008 15:08:13 +0000</pubDate>
      
      <guid>https://lsvking.github.io/237/</guid>
      <description>[shuwen10]神龟虽寿，猷有竟时。腾蛇乘雾，终为土灰。老骥伏枥，志在千里；烈士暮年，壮心不已。盈缩之期，不但在天；养怡之福，可得永年。幸甚至哉！歌以咏志。[/shuwen]
这个有意思么？哈哈这个是用了轶姐的竖文插件的效果，用的时候有个小插曲，php4的用不来，呵呵！</description>
    </item>
    
    <item>
      <title>WordPress自动升级插件 wordpress automatic upgrade</title>
      <link>https://lsvking.github.io/229/</link>
      <pubDate>Fri, 18 Jul 2008 13:44:56 +0000</pubDate>
      
      <guid>https://lsvking.github.io/229/</guid>
      <description> 今天给博客升了下级，弄到2.6了，WP的升级实在麻烦，为此我找到了下面这款插件，作者网站好像在维护上不去了，我在这里把它发出来。
 将下载的文件传到插件目录下，启动插件，一直Next就差不多了，第一步他会备份数据库的，会给出个下载地址，大家最好下载到本地。我升级完后却怎么也登录不上后台了，想了一下清除了下Cookie就OK了。
他是从官方下载的版本安装的，大家安装完后，自己在去下中文包吧。
此插件是经过了如下几个步骤
 1.备份数据库和文件到本地。 2.从 http://wordpress.org/latest.zip 下载最新的补丁并解压。 3.将你的站点设置为维护状态，主页被提示更新页暂时替换。 4.锁定所有插件。 5.后台更新 WordPress。 6.在新窗口中显示更新后主页 7.自动激活所有插件(按照 Keith 所说这一步应该可以实现，但是在我的 BLOG 上并没有完成，所有插件最后还是由我手动激活)  个人角度来看，这款插件在很大程度上解决了因为 WordPress 版本更新的问题，而且最大限度的避免了数据和文件的丢失(其备份的过程和 WordPress Database Backup 插件基本类似)。由于使用 FTP 来进行更新操作，所以更新完成的速度也是很快的(我的BLOG更新大约前后用了不到一分钟)，基本不会因为更新而导致你的站点无法访问。
下载地址:http://wordpress.org/extend/plugins/wordpress-automatic-upgrade/
本站下载:
  wordpress-automatic-upgrade.1.2.0.2.zip   </description>
    </item>
    
    <item>
      <title>WordPress 2.6 正式版及中文版发布</title>
      <link>https://lsvking.github.io/219/</link>
      <pubDate>Thu, 17 Jul 2008 14:13:51 +0000</pubDate>
      
      <guid>https://lsvking.github.io/219/</guid>
      <description>对于 WordPress 的爱好者而言，今天又是一个值得庆贺的日子。WordPress 团队刚刚发布了令人期待的 WordPress 2.6 正式版。这是 WordPress 又一个重要的版本。根据此版本，我们 WordPress 中文站制作了相应的 WordPress 2.6 中文版，与 WordPress 中文社区的爱好者来及时分享这一版本。
WordPress 2.6 中文版下载地址：http://wpchina.org/downloads/
您也可以从以下地址直接下载：
WordPress 2.6 中文版 （zip压缩包）
http://wordpresschina.googlecode.com/files/wordpress.26.chs.zip
WordPress 2.6 中文版 （gz压缩包）
http://wordpresschina.googlecode.com/files/wordpress.26.chs.tar.gz
WordPress 2.6 中文语言包 （zip压缩包）
http://wordpresschina.googlecode.com/files/wordpress.26.chs.languages.only.zip
WordPress 2.6 中文语言包 （gz压缩包）
http://wordpresschina.googlecode.com/files/wordpress.26.chs.languages.only.tar.gz
自 WordPress 2.5 以来，WordPress 2.6 的主要更新包括：
 文章版本管理功能，将保存你每次所修改的版本，允许你查看（不是编辑）每次修改的版本，可以对任何两个版本进行比较； 允许在文章和页面中显示图片的说明； 在管理面板的设计中，增加了主题分页功能； 在撰写和编辑文章的时候，自动统计字数； 增加里“快速发布”书签； 增加了相册排序功能； 导入/导出文章摘要； 增加了主题预览工具； TinyMCE 编辑器升级到 3.1； 允许两个分类有相同的子分类。
与英文版本相比，WordPress 2.6 中文版主要完成了本地化工作，包括： 我们添加了中文语言包，添加于 wp-content/languages/ 目录下 。 我们修改了配置文件，即根目录 wp-config.php 文件，将默认语言设置为中文，并列出了两个实用参数。  我们调整了默认主题，默认字体太小，不太适合中文，我们适当调大的字体。 我们翻译了说明文档，详细介绍了 WordPress 2.</description>
    </item>
    
    <item>
      <title>测试wp-t-wap插件</title>
      <link>https://lsvking.github.io/207/</link>
      <pubDate>Tue, 22 Apr 2008 15:30:21 +0000</pubDate>
      
      <guid>https://lsvking.github.io/207/</guid>
      <description>为了给博客增加个wap功能给博客装了个wp-wap在搜索相关信息时无意间出现了一款叫做wp-t-wap得插件，这也是一款使wp实现wap功能得插件，是有wp-wap 修改而来改善了对中文的支持，本文就是用手机发布的，感觉很不错，希望有这方面需求的朋友安装个试试看。
最信1.6版下载地址
http://www.tanggaowei.com/2008/01/04/7.html
4ec9c3aa
e9fbc5f7</description>
    </item>
    
    <item>
      <title>DedeCMS模板制作使用实例教程（十五）【Pagetitle 标记使用实例】</title>
      <link>https://lsvking.github.io/165/</link>
      <pubDate>Sat, 22 Mar 2008 21:13:29 +0000</pubDate>
      
      <guid>https://lsvking.github.io/165/</guid>
      <description>【Pagetitle 标记】
功能说明：表示获取文档的分页标题
适用范围：仅文档模板。
通过调试了解其使用方法
我调试的方法是：
将templets\default\文件夹下的article_article.htm文件中的代码，全部掏空。放入调用【Pagetitle 标记】的代码，再在管理后台进行操作，如下：HTML更新–&amp;gt;更新文档HTML–&amp;gt;开始生成HTML。再在IE中访问网站的各个文档，就 可以得到返回的数据。
我调试【Pagetitle 标记】的具体代码如下：
文章标标题:{dede:field name=&amp;ldquo;title&amp;rdquo;/}
文章内容:{dede:field name=&amp;ldquo;body&amp;rdquo;/}
{dede:pagetitle style=’select’/}
{dede:prenext/} 得到如下返回数据：

注意：
想要使用【Pagetitle 标记】的前提条件是，文章存在分页，而且要手动在需分的地方加上#p#副标题#e#，实现分页的。
而且要将“#p#副标题#e#”，替换成相应的标题，如下图较所示。能得到到如上面的返回数据。</description>
    </item>
    
    <item>
      <title>DedeCMS模板制作使用实例教程（十四）【Prenext 标记 标记使用实例】</title>
      <link>https://lsvking.github.io/160/</link>
      <pubDate>Sat, 22 Mar 2008 21:08:15 +0000</pubDate>
      
      <guid>https://lsvking.github.io/160/</guid>
      <description>【Prenext 标记】表示获取文档“上一篇／下一篇”的链接列表。
适用范围：仅文档模板。
通过调试了解其使用方法
我调试的方法是：
将templets\default\文件夹下的article_article.htm文件中的代码，全部掏空。放入调用【Prenext 标记】的代码，再在管理后台进行操作，如下：HTML更新–&amp;gt;更新文档HTML–&amp;gt;开始生成HTML。再在IE中访问网站的各个文档，就 可以得到返回的数据。
我调试【Pagelist 标记】的具体代码如下：
文章标标题:{dede:field name=&amp;ldquo;title&amp;rdquo;/}
文章内容:{dede:field name=&amp;ldquo;body&amp;rdquo;/}
{dede:pagebreak/}
{dede:prenext/} 得到如下返回数据：</description>
    </item>
    
    <item>
      <title>DedeCMS模板制作使用实例教程（十三）【Pagebreak 标记使用实例】</title>
      <link>https://lsvking.github.io/157/</link>
      <pubDate>Sat, 22 Mar 2008 20:49:16 +0000</pubDate>
      
      <guid>https://lsvking.github.io/157/</guid>
      <description>【Pagebreak 标记】表示文档的分页链接列表。
适用范围：仅文档模板。
通过调试了解其使用方法
我调试的方法是：
将templets\default\文件夹下的list_default.htm和htmlist_article.htm文件中的代码，全部掏空。放 入调用【Pagelist 标记】的代码，再在管理后台进行操作，如下：HTML更新–&amp;gt;更新文档HTML–&amp;gt;开始生成HTML。再在IE中访问网站的各个文档，就 可以得到返回的数据。
我调试【Pagelist 标记】的具体代码如下：
文章标标题:{dede:field name=&amp;ldquo;title&amp;rdquo;/}
文章内容:{dede:field name=&amp;ldquo;body&amp;rdquo;/}
{dede:pagebreak/}
得到如下返回数据：

注意：想要使用【Pagebreak 标记】的前提条件是，文章存在分页。文章较短，我是手动在需分的地方加上 #p#分页标题#e# ，实现分页的。如果没有分页，调用这个标记，返回的都是空数据，徒劳。</description>
    </item>
    
    <item>
      <title>DedeCMS模板制作使用实例教程（十二）【Pagelist 标记使用实例】</title>
      <link>https://lsvking.github.io/154/</link>
      <pubDate>Sat, 22 Mar 2008 20:44:49 +0000</pubDate>
      
      <guid>https://lsvking.github.io/154/</guid>
      <description>【Pagelist 标记】表示分页页码列表
适用范围：列表模板
通过调试了解其使用方法
我调试的方法是：
将templets\default\文件夹下的list_default.htm和htmlist_article.htm文件中的代码，全部掏空。放 入调用【Pagelist 标记】的代码，再在管理后台进行操作，如下：HTML更新–&amp;gt;更新栏目HTML–&amp;gt;开始生成HTML。再在IE中访问网站的各栏封面和列 表，就可以得到返回的数据。
我调试【Pagelist 标记】的具体代码如下：
 {dede:list col=&amp;#8217;1&amp;#8242; row=&amp;#8217;3&amp;#8242; titlelen=&amp;#8217;20&amp;#8217; infolen=&amp;#8217;100&amp;#8242; imgwidth=&amp;#8217;120&amp;#8242; imgheight=&amp;#8217;80&amp;#8217; pagesize=&amp;#8217;3&amp;#8242; typeid=&amp;#8217;95&amp;#8217;} \[field:imglink/\] \[field:textlink/\] [field:info/] {/dede:list}  {dede:pagelist listsize=&amp;#8217;3&amp;#8242; listitem=&amp;#8217;index pre pageno next end option&amp;#8217;/} 得到如下返回数据： [][1] </description>
    </item>
    
    <item>
      <title>DedeCMS模板制作使用实例教程（十）【Channelartlist 标记 使用实例】</title>
      <link>https://lsvking.github.io/151/</link>
      <pubDate>Sat, 22 Mar 2008 20:38:28 +0000</pubDate>
      
      <guid>https://lsvking.github.io/151/</guid>
      <description>【Channelartlist 标记】用于获取当前频道的下级栏目的内容列表。该标记在封面模板（包括主页）中的经常被用到，具体用法见下面实例。
除了宏标记外，channelArtlist 是唯一一个可以直接嵌套其它标记的标记，不过仅限于嵌套 {dede:type}{/dede:type} 和 {dede:arclist}{/dede:arclist} 两个标记。
通过调试了解其使用方法
我调试的方法是：
将templets\default\文件夹下的index.html文件代码，全部掏空。放入调用【Channelartlist 标记】的代码，再在IE中访问网站主页index.php，就可以得到返回的数据。
例1
我调试【Channelartlist 标记】的具体代码如下：
{dede:channelArtlist typeid=&amp;ldquo;94&amp;rdquo; col=&amp;ldquo;1&amp;rdquo;}
{dede:type} [field:typename/] {/dede:type}   {dede:arclist row=&#34;5&#34;} [field:textlink/] {/dede:arclist}    {/dede:channelArtlist} 得到如下返回数据： [][1] 注意：细心的朋友会发现，使用【Channelartlist 标记】时，需要你对div + css或者table的控制能力较强，否则在页面中很难控制它。请大家他细看下面例2，例1与例2代码上相差很小，但得到的布局却相差很大。仔细对比一下吧！ 例2 我调试【Channelartlist 标记】的具体代码如下： {dede:channelArtlist typeid=&#34;94&#34; col=&#34;1&#34;} {dede:type} [field:typename/] {/dede:type}   {dede:arclist row=&#34;5&#34;} [field:textlink/] {/dede:arclist}    {/dede:channelArtlist} 得到如下返回数据： [][2] </description>
    </item>
    
    <item>
      <title>DedeCMS模板制作使用实例教程（九）【Mynews 标记 使用实例】</title>
      <link>https://lsvking.github.io/145/</link>
      <pubDate>Sat, 22 Mar 2008 20:06:15 +0000</pubDate>
      
      <guid>https://lsvking.github.io/145/</guid>
      <description>【Mynews 标记】用于获取站内新闻。
站内新闻有利于站长及时与会员沟通。
使用思路、步骤：
一、明确使用范围
我们在使用任何标记的过程中，都必须明确其使用的范围，否则可能无法正常调用该标签，【Mynews 标记】的使用范围是：
封面模板
二、通过调试了解其使用方法
我调试的方法是：
将templets\default\文件夹下的index.html文件代码，全部掏空。放入调用【Mynews 标记】的代码，再在IE中访问网站主页index.php，就可以得到返回的数据。
我调试【Mynews 标记】的具体代码如下：
{dede:mynews row=’2′ titlelen=’30’}标题：[field:title/] 作者：[field:writer/] 时间：[field:senddate function=&amp;ldquo;strftime(‘%y-%m-%d %H:%M’,@me)&amp;quot;/] 内容：[field:body/] {/dede:mynews}
得到如下返回数据：</description>
    </item>
    
    <item>
      <title>DedeCMS模板制作使用实例教程（八）【Flink 标记使用实例】</title>
      <link>https://lsvking.github.io/142/</link>
      <pubDate>Sat, 22 Mar 2008 20:04:25 +0000</pubDate>
      
      <guid>https://lsvking.github.io/142/</guid>
      <description>【Flink 标记】用于获取友情链接。
调用该标记后可以得到四种友情链接的形式。
使用思路、步骤：
一、明确使用范围
我们在使用任何标记的过程中，都必须明确其使用的范围，否则可能无法正常调用该标签，【Flink 标记】的使用范围是：
封面模板
二、通过调试了解其使用方法
我调试的方法是：
将templets\default\文件夹下的index.html文件代码，全部掏空。放入调用【Flink 标记】的代码，再在IE中访问网站主页index.php，就可以得到返回的数据。
补充：

我调试【Flink 标记】的具体代码如下：
全部用文字显示：{dede:flink type=’textall’ row=’4’ titlelen=’20’}{/dede:flink}
文字和图文混合排列：{dede:flink type=’textimage’ row=’4’ titlelen=’20’}{/dede:flink}
仅显示不带Logo的链接：{dede:flink type=’text’ row=’4’ titlelen=’20’}{/dede:flink}
仅显示带Logo的链接：{dede:flink type=’image’ row=’4’ titlelen=’20’}{/dede:flink}
得到如下返回数据：</description>
    </item>
    
    <item>
      <title>DedeCMS模板制作使用实例教程（七）【Vote 标记使用实例】</title>
      <link>https://lsvking.github.io/137/</link>
      <pubDate>Sat, 22 Mar 2008 19:29:03 +0000</pubDate>
      
      <guid>https://lsvking.github.io/137/</guid>
      <description>【Vote 标记】用于获取一组投票表单。
其使用范围限于：封面模板。
可先进入后台，按下面操作方法填写好调查内容：
辅助插件–&amp;gt;投票模块–&amp;gt;增加一组投票
通过调试了解其使用方法
我调试的方法是：
将templets\default\文件夹下的index.html文件代码，全部掏空。放入调用【Vote 标记】的代码，再在IE中访问网站主页index.php，就可以得到返回的数据。
我调试【Channel 标记】的具体代码如下：
{dede:vote id=’2′ lineheight=’22’
tablewidth=’100%’ titlebgcolor=’#EDEDE2′
titlebackground=” tablebgcolor=’#FFFFFF’}
{/dede:vote}
得到如下返回数据：</description>
    </item>
    
    <item>
      <title>DedeCMS模板制作使用实例教程（六）【Mytag 标记使用实例】</title>
      <link>https://lsvking.github.io/134/</link>
      <pubDate>Sat, 22 Mar 2008 19:20:13 +0000</pubDate>
      
      <guid>https://lsvking.github.io/134/</guid>
      <description>自定义宏标记【Mytag 标记】的作用：
可以将模板中多次出现的相同元素用一个自定义标记表示出来，从而达到，一次更改，全局更换的效果。辅助插件的广告管理也有相似的效果。
今天天涯来介绍下自定义宏标记的应用，大家可以进入后台，在“模板管理”-》“自定义宏标记”中查看到该选项。
自定义宏标记的作用：
可以将模板中多次出现的相同元素用一个自定义标记表示出来，从而达到，一次更改，全局更换的效果。辅助插件的广告管理也有相似的效果。
适用范围：
网页模板中多次出现的相同元素，例如：网站的导航条、网站的站点公告、网站的底部信息等，在我之前发布的几套模板中都运用到了自定义宏标记。
自定义宏标记的调用办法：
{dede:mytag name=’标记名称’ ismake=’是否含板块代码（yes 或 no）’ typeid=’栏目ID’/}
1、name 标记名称，该项是必须的属性，以下 2、3是可选属性；
2、ismake 默认是 no 表示设定的纯HTML代码， yes 表示含板块标记的代码；
3、typeid 表示所属栏目的ID，默认为 0 ，表示所有栏目通用的显示内容，在列表和文档模板中，typeid默认是这个列表或文档本身的栏目ＩＤ。
下面来通过一个实例进行说明：
我有一个网站模板底部信息，其长度已经超出了系统可以设置的网站版权（cfg_powerby）的长度，但是我想实现一段代码，可以在不同模板（页面）中显示相同内容的效果。
我们就可以使用自定义宏标记来实现这个效果
如图进行设置：

然后我们回到模板制作的界面，将模板中的{dede:global name=’cfg_powerby’/}，替换为我们设置的自定义宏标记：
{dede:mytag name=’footer’/},更新下，是不是已经变为我们设置的标记内容了啊。
当然，自定义宏标记里面也可以加入dedecms的标记内容，适合当前栏目的显示内容，不过需要在调用代码中将ismake设为yes才可以，也可以通过设置typeid使自定义宏标记在特定栏目中显示。
有人会问，我已经生成了很多页面了，现在想更改了一下自定义宏标记的内容，那岂不是要更改后重新再生成一遍，那样就不方便了。
其实柏拉图早就考虑到这点，在自定义宏标记中可以使用javascript调用，这样以来，只要改变一次就可以实现全局改变的效果。
具体操作：进入自定义标记管理，在相对应的标记管理项目中有JS调用这个选项，单击，dedecms自动生成调用该ID标记的js代码，例如&amp;lt; script src=’/plus/mytag_js.php?aid=1′ language=’javascript’&amp;gt;
我们将刚才的{dede:mytag name=’footer’/}用js替换掉，更新下，是不是还是原来的效果，我们再修改下标记的内容，怎么样？全局发生了变化。
怎么样，自定义宏标记内容强大吧，相信他的引入会给你的模板制作带来更好的效果。</description>
    </item>
    
    <item>
      <title>DedeCMS模板制作使用实例教程（五）【Autochannel 标记使用实例】</title>
      <link>https://lsvking.github.io/131/</link>
      <pubDate>Sat, 22 Mar 2008 19:16:50 +0000</pubDate>
      
      <guid>https://lsvking.github.io/131/</guid>
      <description>{dede:autochannel partsort=’1’/}
{dede:channel typeid=’1′} [field:typename/] {/dede:channel}
{dede:autolist row=12 titlelen=38 orderby=pubdate partsort=’1′}
[field:textlink/] {/dede:autolist}
autochannel，autolist 是专门给懒人用的，partsort 的属性是表示排列顺序为某位置，它是栏目排列的位置，不是ID，这样的好处是，没有某个ID，只要有足够的栏目，也会显示内容，这个标记如果加了 typeid，则变成获取特定栏目的子栏目的这个排序位置的内容了</description>
    </item>
    
    <item>
      <title>DedeCMS模板制作使用实例教程（四）【Type 标记使用实例】</title>
      <link>https://lsvking.github.io/130/</link>
      <pubDate>Sat, 22 Mar 2008 18:28:03 +0000</pubDate>
      
      <guid>https://lsvking.github.io/130/</guid>
      <description>【Type 标记】表示指定的单个栏目的链接，用法非常简单。
说明：为了便于下面内容的理解，我将数据库中网站频道的截图如下：

使用思路、步骤：
一、明确使用范围
我们在使用任何标记的过程中，都必须明确其使用的范围，否则可能无法正常调用该标签，【Type 标记】的使用范围是：
封面模板、列表模板、文档模板。
通过调试了解其使用方法
我调试的方法是：
将templets\default\文件夹下的index.html文件代码，全部掏空。放入调用【Type 标记】的代码，再在IE中访问网站主页index.php，就可以得到返回的数据。
我调试【Channel 标记】的具体代码如下：
{dede:type typeid=’96’}{/dede:type}
{dede:channel typeid=’96’}
&amp;lt;a href=&#39;[field:typelink /]’&amp;gt;[field:typename/]
{/dede:channel}
得到如下返回数据：

通过以上两行代码的对比，相信你的认识会更深刻。前者是生成单一的数据，后者通过数组生成一组的数据。</description>
    </item>
    
    <item>
      <title>DedeCMS模板制作使用实例教程（三）【Channel 标记使用实例】</title>
      <link>https://lsvking.github.io/125/</link>
      <pubDate>Sat, 22 Mar 2008 18:03:48 +0000</pubDate>
      
      <guid>https://lsvking.github.io/125/</guid>
      <description>【Channel 标记】主要用于获取栏目列表，用法非常简单，主要是区分“type = top,sun/son,self ”的所调用的对象就行了。
说明：为了便于下面内容的理解，我将数据库中网站频道的截图如下：

使用思路、步骤：
一、明确使用范围
我们在使用任何标记的过程中，都必须明确其使用的范围，否则可能无法正常调用该标签，【Channel 标记】的使用范围是：
封面模板、列表模板、文档模板。
二、通过调试了解其使用方法
我调试的方法是：
将templets\default\文件夹下的index.html文件代码，全部掏空。放入调用【Channel 标记】的代码，再在IE中访问网站主页index.php，就可以得到返回的数据。
调用方法一：
我调试【Channel 标记】的具体代码如下：
{dede:channel row=’3′ type=’top’}
[field:typename/]
{/dede:channel}
得到如下返回数据：

调用方法二：
我调试【imglist标记】的具体代码如下：
{dede:channel row=’3′ type=’sun’ typeid=’96’}
[field:typename/]
{/dede:channel}
得到如下返回数据：</description>
    </item>
    
    <item>
      <title>DedeCMS模板制作使用实例教程（二）【Field 标记使用实例】</title>
      <link>https://lsvking.github.io/118/</link>
      <pubDate>Sat, 22 Mar 2008 17:54:06 +0000</pubDate>
      
      <guid>https://lsvking.github.io/118/</guid>
      <description>【Field 标记】在封面模板、列表模板、文档模板的使用频率很高，实用。主要用来获得到系统变量的值或者路径，用法很灵活。可以直接展示数据，如调用 position，得到栏目一 &amp;gt; 栏目二” 这样形式的链接；或者，调用templeturl得到/templets这样路径。
使用思路、步骤：
一、明确使用范围
我们在使用【Field 标记】的过程中，必须明确其使用的范围，否则可能无法正常调用该标签，其使用范围是：
封面模板（如index_article.htm）、列表模板（如list_article.htm）、文档模板（如article_article.htm）。
index_article.htm、list_article.htm、article_article.htm等类似的模板文档都在templets\default\文件夹中。
注意：
1、封面模板与列表模板是有区别的，但调用【Field 标记】可以相同；
2、封面模板有不同的类型，我们最常用的是文章模板（index_article.htm），其它的还有图片模板（index_image.htm），简 介模板（index_info.htm），软件模板（index_soft.htm）等等，这些模板调用【Field 标记】的道理都是一样的。
二、通过调试了解其使用方法
我调试的方法是：
将templets\default\文件夹下的list_default.htm和htmlist_article.htm文件中的代码，全部掏空。放 入调用【Field 标记】的代码，再在管理后台进行操作，如下：HTML更新–&amp;gt;更新栏目HTML–&amp;gt;开始生成HTML。再在IE中访问网站的各栏封面和列 表，就可以得到返回的数据。
用法一：
这种用法，主要是从数据库获取相关的数据，特别是系统变量的数据。
我调试【Arclist 标记】的具体代码如下：
调用position标记,得到:栏目一 &amp;gt; 栏目二” 这样形式的链接：{dede:field name=’position’/}
插件路径：{dede:field name=’phpurl’/}
模板路径：{dede:field name=’templeturl’/}
版权信息：{dede:field name=’powerby’/}
主页路径：{dede:field name=’indexurl’/}
主页名称：{dede:field name=’indexname’/}
得到如下返回数据：

请朋友们举一反三，增删属性和写入代码进行调试，加深印象。最好是对照官方的Dedecms文档进行调试，我这样做收获很大的。
用法二：
这一种用法比较灵活，作用也非常大，但必须有HTML知识才能运用的比较好，
我调试【Arclist 标记】的具体代码如下：
注意：本页面的文字和链接都是经过dede.css处理的
织梦论坛 得到如下返回数据：</description>
    </item>
    
    <item>
      <title>DedeCMS模板制作使用实例教程（一）【Arclist 标记使用实例】</title>
      <link>https://lsvking.github.io/109/</link>
      <pubDate>Sat, 22 Mar 2008 17:36:00 +0000</pubDate>
      
      <guid>https://lsvking.github.io/109/</guid>
      <description>从本文开始，我将根据我的学习心得写一系列的实例教程。通过实例说明DedeCMS标记的使用方法。本实例教程使用的版本是DedeCms 2007 V5.0版，在本地架设的php+mysql （APMServ）环境中测试。安装、架设等相关方法参阅寂寞天涯的整理：http://bbs.dedecms.com/read.php?tid=33332。以后一系列教程都是在这个环境中使用，不再重复。因测试需要数据，我已事先在数据库录入，就不理啰嗦，马上进入正题。
现在先讲【Arclist 标记】。【Arclist 标记】是使用率很高，相当实用，所以我们使用都必须熟练掌握。它的详细使用说明在官方Dedecms文档中已经有严密的解释，见：http://www.dedecms.com/archives/templethelp/help/index.htm，我们在使用过程中可以随时查阅。
使用思路、步骤：
一、明确使用范围
我们在使用任何标记的过程中，都必须明确其使用的范围，否则可能无法正常调用该标签，【Arclist 标记】的使用范围是：
封面模板、列表模板、文档模板。
即对应templets\default\文件夹下的
index_识别ID.htm模板、list_识别ID.htm模板、article_识别ID.htm模板）
二、通过调试了解其使用方法
我调试的方法是：
将templets\default\文件夹下的index.html文件代码，全部掏空。放入调用【Arclist 标记】的代码，再在IE中访问网站主页index.php，就可以得到返回的数据。
注意：其它文件保持不变，我不懂PHP，只能用这种方式调试，相信朋友们很容易上手的。
我调试【Arclist 标记】的具体代码如下：
{dede:arclist typeid=” row=’1’ titlelen=’20’ infolen=”
imgwidth=’100′ imgheight=’80’}
文章ID:[field:ID/] 文章标题:[field:title/] 文章短标题:[field:shorttitle/] 文章标题的文字链接:[field:textlink/] 文章作者:[field:writer/] 文章发表日期:[field:stime/] 文章所属栏目的目录:[field:typedir/] 文章所属栏目的名称:[field:typename/] 文章所属栏目的文字链接:[field:typelink/] 文章的图片链接:[field:imglink/] 文章的缩略图:[field:image/] {/dede:arclist}
得到如下返回数据：

文章篇幅所限，未能列出所有的属性和字段调用的方法。请朋友们举一反三，增删属性和写入代码进行调试，加深印象。最好是对照官方的Dedecms文档进行调试，我这样做收获很大的。
三、【Arclist 标记】延伸出来的别名标记（实用又个性化，建议关注使用）
为了使网页内容更具个性化，人性化，官方在【Arclist 标记】的基础上延伸出来一些别外标签，如：hotart、coolart、likeart、artlist、imglist、imginfolist、specart、autolist 。非常好！
我调试【imglist标记】的具体代码如下：
{dede:imglist typeid=” row=’2′ col=’1’ titlelen=’20’ infolen=”
imgwidth=’100′ imgheight=’80’}
[field:imglink/] [field:textlink/]
{/dede:imglist}
得到如下返回数据：

如上例，其它的别名标记，朋友们可以举一反三，融会贯通！</description>
    </item>
    
    <item>
      <title>DedeCMS模板制作使用实例教程  序</title>
      <link>https://lsvking.github.io/108/</link>
      <pubDate>Sat, 22 Mar 2008 17:21:34 +0000</pubDate>
      
      <guid>https://lsvking.github.io/108/</guid>
      <description>1、怎样调用数据？
DedeCMS是大型的动态网站程序，其数据主要在存储在数据库中的，做模板就必须知道，数据是如何从数据库读取并展示在大家面前的。官方写了很多程序，将数据的提取过程变得相当简单。大家只要懂得调用适当的&amp;quot;DedeCMS标记&amp;quot;就可以调取相应的数据。调用&amp;quot;DedeCMS标记&amp;quot;的三种代码样式：
A、{dede:标记名称 属性=’值’/}
B、{dede:标记名称 属性=’值’}{/dede:标记名称}
C、{dede:标记名称 属性=’值’}自定义样式模板(InnerText){/dede:标记名称}
详细的说明参阅官方文件：http://www.dedecms.com/archives/templethelp/help/index.htm。使用时可随时查阅该文档。
我自己想出了一种方法来加深认识，并通过实例调试这些标签，这样认识就比其它人更深一层次。
具体方法是：
将templets\default\文件夹下的index.html文件代码，全部掏空。放入自己想要调试的标签，再在IE中访问网站主页index.php，就可以得到返回的数据。
比如：
a、放入标签{dede:global name=&amp;ldquo;cfg_webname&amp;rdquo; /}就得到了“网站名称”
b、放入标签{dede:artlist typeid=” row=5}[field:title/]
{/dede:artlist}就返回5篇文章的标题。
c、放入标签{dede:arclist infolen=’100′ row=5}[field:textlink/]
[field:info/]
{/dede:arclist}就返回5篇文章的标题和相应的内容简介
注意：abc实例是与上面ABC三种形式相对应的。大家可以按照官方的文档，逐个测试，举一反三。
至于DedeCMS程序是怎样实现的，我不懂PHP，搞不清楚，我觉得也没必要全都弄懂，搞模板的就专心搞模板，程序的归由技术人员去处理。
搞清楚上面内容，基本上就会调用数据库中自己需要的数据了。
在这里还必须搞清楚DedeCMS模板的不同类型的标记。
寂寞天涯把标记分为两种不同的类型，详细内容见http://bbs.dedecms.com/read.php?tid=51186
2、怎样将网站内容展示给访问者？
访问网的朋友希望看到的是经过组织的完整和系统的内容，而不是散落的各种数据。所以我们就必须将数据组织在一个网页中，DedeCMS的强大就在于通过某一PHP页面，调用相对应的htm页面，将数据库数据有组织的生成在一个静态网页（档案页）中。
比如：网站主页的模板就是templets\default\index.html，DedeCMS通过根目录中的index.php文件调用相应的程序，获取数据库的数据，生成主页。
上面是生成主页的大概过程，其它页面的生成都是一样的道理。
相关的模板有：
A、主页模板
B、板块（封面）模板
C、列表模板
D、档案模板
E、搜索模板
F、ＲＳＳ功能模板
G、ＪＳ编译功能模板
H、站内新闻发布模板
I、友情链接模板
J、留言簿模板
…… ……
注意：上面这些模板都是通过相对应的PHP程序来调用并生成网页实现其功能的，这些模板主要集中在templets\default\和templets \plus\文件夹中，详细情况请朋友自己查询。修改这两个文件夹中的模板文件，就可以得到各种各样自己想要的网页的样式，想要多漂亮就能有多漂亮，当然要看你的技术水平了！呵呵
看到这么多样化的模板，有的人可能就傻眼了，觉得很乱，其实，你只要把网站的页面分为三个级别就起到一个提纲挈领的作用了。即理解成类似于：【主页=&amp;gt;列表页=&amp;gt;档案页】就行了。即官方所说的“板块（封面）模板、列表模板、档案模板”三种不同的级别。
3、如何根据自己的需要制作网站？
网站的功能主要靠程序来实现，这方面当然有赖于柏拉图带领下的DedeCMS技术人员了，希望功能越来越多，越来越人性化，加油！！！
根据客户提出的要求，调用相关的标签……
DedeCMS网站制作的实例敬请期待，我现正在策划制作一个综合的网站……
4、精通模板制作需要哪方面的基本知识？
我个人认为，做模板的只要懂得html,css，美工等基本的常识就行了。
比如……
我已经用“DedeCms OX V4.0版”制作了两个网站:www.0750ly.com,www.tour-tibet.org 但都是修改别人的模板，我自己也相当不满意，希望这次认真学习DedeCms模板制作后，能有质的飞跃，拥有一个漂亮的综合网站。
对建站和DedeCms模板制作有兴趣的朋友，请加我的群51584591，一起讨论，共同进步！
小贴士：
不懂的地方一定要充分利用搜索引擎和论坛搜索功能或者向技术人员提问。
本教程适合超级菜鸟，高手飘过！
 原作者wwwlikespcn</description>
    </item>
    
    <item>
      <title>常用CSS命名参考</title>
      <link>https://lsvking.github.io/107/</link>
      <pubDate>Sat, 22 Mar 2008 00:31:38 +0000</pubDate>
      
      <guid>https://lsvking.github.io/107/</guid>
      <description>在XHTML中定义ID时都用得上，主要是方便CSS定义样式时能一眼看穿。所以，CSS命名仅作参考。
(1)页面结构类
容器: container
页头：header
内容：content/container
页面主体：main
页尾：footer
导航：nav
侧栏：sidebar
栏目：column
页面外围控制整体布局宽度：wrapper
(2)导航类
导航：nav
主导航：mainnav
子导航：subnav
顶导航：topnav
边导航：sidebar
左导航：leftsidebar
右导航：rightsidebar
位置导航： crumb
菜单：menu
子菜单：submenu
面包屑：breadcrumb(即页面所处位置导航提示）
(3)网页内容类
标题: title
摘要: summary
箭头： arrow
商标： label
网站标志： logo
转角/圆角： corner
横幅广告： banner
栏目： column
子菜单： subMenu
搜索： search
搜索框： searchBox
登录： login
工具条： toolbar
下拉： drop
标签页： tab
当前的： current
列表： list
滚动： scroll
服务： service
提示信息： msg
新闻： news
小技巧： tips</description>
    </item>
    
    <item>
      <title>HTML5的结构和语义——内嵌媒体（五）</title>
      <link>https://lsvking.github.io/106/</link>
      <pubDate>Sun, 09 Mar 2008 14:09:35 +0000</pubDate>
      
      <guid>https://lsvking.github.io/106/</guid>
      <description>视频已经在 Web 上广泛流行了，但是其格式几乎都是专有的。YouTube 使用 Flash，Microsoft 使用 Windows Media®，Apple 使用 QuickTime。在一种浏览器中用来嵌入这些内容的标记在另一种浏览器中是无效的。因此， WhatWG 提议引入一个新的 video 元素，用来嵌入任意视频格式。例如，可以用以下代码嵌入我的 QuickTime 电影 “a Sora in Prospect Park”：
1: &amp;lt;video src=&#34;http://www.cafeaulait.org/birds/sora.mov&#34; /&amp;gt;
   对于以哪种格式和解码器作为首选，仍然有争议。可能会强力推荐或要求使用 Ogg Theora。还可以可选地支持 QuickTime 等专有格式和 MPEG-4 等受专利限制的格式。实际使用的格式很可能由市场决定，就像是 GIF、JPEG 和 PNG 格式那样（这些格式通过市场竞争压倒了 BMP、X-Bitmap 和 JPEG 2000 等竞争者，成为 img 元素的首选格式）。 还提议引入 audio 元素。例如，可以使用以下代码给 Web 页面加上背景音乐：
1: &amp;lt;audio src=&#34;spacemusic.mp3&#34; autoplay=&#34;autoplay&#34; loop=&#34;20000&#34; /&amp;gt;
   autoplay 属性指示浏览器在装载页面后立即开始播放，而不等待明确的用户请求。音频循环播放 20,000 次，然后停止（或者在用户关闭窗口或转到另一个页面时停止）。当然，浏览器可以（而且应该）允许用户关闭内嵌的媒体，不应该只按页面作者的要求去做。 浏览器必须支持 WAV 格式，还可以支持 MP3 等其他格式。 因为老式浏览器不支持这些元素，而且它们对于盲人和聋人用户来说没有意义，所以 audio 和 video 元素可以包含额外的标记，用来描述音频和视频的内容。这对搜索引擎也有帮助。在理想情况下，这些标记是音频和视频内容的完整文字版本。例如，代码8 显示 用 HTML 5 编写的 John F.</description>
    </item>
    
    <item>
      <title>HTML5的结构和语义——语义性的内联元素（四）</title>
      <link>https://lsvking.github.io/105/</link>
      <pubDate>Sun, 09 Mar 2008 14:04:39 +0000</pubDate>
      
      <guid>https://lsvking.github.io/105/</guid>
      <description>HTML4用5个不同的内联元素表示略有差异的计算机代码：var、code、kbd、tt 和 samp。但是，它无法表示时间、数字等基本数值。HTML 5 提供了几个新的内联元素来满足非技术作者的需求。  m
m 元素表示文本被 “加上标志”，但是不一定要强调。可以把它想像成书中突出显示的一节。Google 的缓存页面就是典型的用例。如果链接到一个缓存的副本，搜索词就被加上标志。例如，如果搜索 “Egret”，那么缓存的 Google 页面可能像下面这样：
1: The Great &amp;lt;m&amp;gt;Egret&amp;lt;/m&amp;gt; (also known as the &amp;lt;pre style=&amp;quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;amp;#39;Courier New&amp;amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color: #606060&amp;quot;&amp;gt; 2:&amp;lt;/span&amp;gt; American &amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #800000&amp;quot;&amp;gt;m&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;Egret&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;lt;/&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #800000&amp;quot;&amp;gt;m&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;) is a large white wading bird found worldwide.</description>
    </item>
    
    <item>
      <title>HTML5的结构和语义——语义性的块级元素（三）</title>
      <link>https://lsvking.github.io/104/</link>
      <pubDate>Sun, 09 Mar 2008 13:59:11 +0000</pubDate>
      
      <guid>https://lsvking.github.io/104/</guid>
      <description>HTML 5 还增加了一些纯语义性的块级元素： aside figure dialog 我在文章和书中一直使用前两个元素。第三个元素我不经常用，它主要用于书面文本。 aside aside 元素代表说明、提示、边栏、引用、附加注释等，也就是叙述主线之外的内容。例如，在 developerWorks 文章中，常常会看到用表格形式编写的边栏，见代码3 用 HTML 4 编写的 developerWorks 边栏。
1: &amp;lt;table align=&#34;right&#34; border=&#34;0&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; width=&#34;40%&#34;&amp;gt; &amp;lt;pre style=&amp;quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;amp;#39;Courier New&amp;amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color: #606060&amp;quot;&amp;gt; 2:&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #800000&amp;quot;&amp;gt;tbody&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;gt;&amp;amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #800000&amp;quot;&amp;gt;tr&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;gt;&amp;amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #800000&amp;quot;&amp;gt;td&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #ff0000&amp;quot;&amp;gt;width&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;=&amp;quot;10&amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt; &amp;lt;pre style=&amp;quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;amp;#39;Courier New&amp;amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color: #606060&amp;quot;&amp;gt; 3:&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #800000&amp;quot;&amp;gt;img&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #ff0000&amp;quot;&amp;gt;alt&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;=&amp;quot;&amp;quot;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #ff0000&amp;quot;&amp;gt;src&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;=&amp;quot;//www.</description>
    </item>
    
    <item>
      <title>HTML5的结构和语义——结构</title>
      <link>https://lsvking.github.io/103/</link>
      <pubDate>Sun, 09 Mar 2008 13:53:25 +0000</pubDate>
      
      <guid>https://lsvking.github.io/103/</guid>
      <description>转载 52CSS
 由于缺少结构，即使是形式良好的 HTML 页面也比较难以处理。必须分析标题的级别，才能看出各个部分的划分方式。边栏、页脚、页眉、导航条、主内容区和各篇文章都由通用的 div 元素来表示。HTML 5 添加了一些新元素，专门用来标识这些常见的结构： · section：这可以是书中的一章或一节，实际上可以是在 HTML 4 中有自己的标题的任何东西 · header：页面上显示的页眉；与 head 元素不一样 · footer：页脚；可以显示电子邮件中的签名 · nav：指向其他页面的一组链接 · article：blog、杂志、文章汇编等中的一篇文章 我们来考虑一个典型的 blog 主页，它的顶部有页眉，底部有页脚，还有几篇文章、一个导航区和一个边栏，见代码
 1 典型的 blog 页面
1: &amp;lt;html&amp;gt; &amp;lt;pre style=&amp;quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;amp;#39;Courier New&amp;amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color: #606060&amp;quot;&amp;gt; 2:&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #800000&amp;quot;&amp;gt;head&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt; &amp;lt;pre style=&amp;quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;amp;#39;Courier New&amp;amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color: #606060&amp;quot;&amp;gt; 3:&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #800000&amp;quot;&amp;gt;title&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;Mokka mit Schlag &amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;lt;/&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #800000&amp;quot;&amp;gt;title&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt; &amp;lt;pre style=&amp;quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;amp;#39;Courier New&amp;amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color: #606060&amp;quot;&amp;gt; 4:&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;lt;/&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #800000&amp;quot;&amp;gt;head&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt; &amp;lt;pre style=&amp;quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;amp;#39;Courier New&amp;amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color: #606060&amp;quot;&amp;gt; 5:&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #800000&amp;quot;&amp;gt;body&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt; &amp;lt;pre style=&amp;quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;amp;#39;Courier New&amp;amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color: #606060&amp;quot;&amp;gt; 6:&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #800000&amp;quot;&amp;gt;div&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #ff0000&amp;quot;&amp;gt;id&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;=&amp;quot;page&amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt; &amp;lt;pre style=&amp;quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;amp;#39;Courier New&amp;amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color: #606060&amp;quot;&amp;gt; 7:&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #800000&amp;quot;&amp;gt;div&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #ff0000&amp;quot;&amp;gt;id&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;=&amp;quot;header&amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt; &amp;lt;pre style=&amp;quot;padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &amp;amp;#39;Courier New&amp;amp;#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;color: #606060&amp;quot;&amp;gt; 8:&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #800000&amp;quot;&amp;gt;h1&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;&amp;amp;gt;&amp;amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #800000&amp;quot;&amp;gt;a&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color: #ff0000&amp;quot;&amp;gt;href&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color: #0000ff&amp;quot;&amp;gt;=&amp;quot;http://www.</description>
    </item>
    
    <item>
      <title>HTML 5.0 新一代的HTML标准~</title>
      <link>https://lsvking.github.io/95/</link>
      <pubDate>Mon, 25 Feb 2008 21:27:04 +0000</pubDate>
      
      <guid>https://lsvking.github.io/95/</guid>
      <description>新千年以来，超文本标记语言（HTML）5 第一次向 HTML 中引入新的元素。新的结构元素包括 aside、figure 和section。新的内联元素包括time、meter和progress。新的内嵌元素有 video 和 audio。新的交互元素有 details、datagrid 和command
超文本标记语言（HTML）的开发到 1999 年 HTML 4 就停止了。万维网联盟（W3C）把重点转向将 HTML 的底层语法从标准通用标记语言（SGML）改为可扩展标记语言（XML），以及可缩放向量图型（SVG）、XForms 和 MathML 这些全新的标记语言。浏览器厂商则把精力放到选项卡和富站点摘要（RSS）阅读器这类浏览器特性上。Web 设计人员开始学习使用异步 JavaScript + XML（Ajax），在现有的框架下通过层叠样式表（CSS）和 JavaScript™ 语言建立自己的应用程序。但是在接下来的八年中，HTML 本身没有任何变化。
 最近，它又复活了。三家重要的浏览器厂商 — Apple、Opera 和 Mozilla Foundation — 成立了 Web Hypertext Application Technology Working Group（WhatWG）来开发传统 HTML 的新版本。最近，W3C 也注意到了这些活动，也启动了自己的新一代 HTML 项目，双方的成员有很多是相同的。这两个项目最终很可能合并。虽然很多细节还在争论之中，但下一版本 HTML 的大体轮廓已经清楚了。
 Web 开发人员从 1999 年就一直期待 HTML 的新版本（通常称为 HTML 5，但是也称为 Web Applications 1.0），现在它终于发布了。它保持了 HTML 原来的特色：没有名称空间或模式。元素不必结束。浏览器会宽容地对待错误。&amp;lt;font face=&amp;quot;Courier New&amp;quot;&amp;gt;p&amp;lt;/font&amp;gt; 仍然是 &amp;lt;font face=&amp;quot;Courier New&amp;quot;&amp;gt;p&amp;lt;/font&amp;gt;，&amp;lt;font face=&amp;quot;Courier New&amp;quot;&amp;gt;table&amp;lt;/font&amp;gt; 仍然是 &amp;lt;font face=&amp;quot;Courier New&amp;quot;&amp;gt;table&amp;lt;/font&amp;gt;。</description>
    </item>
    
    <item>
      <title>CSS Hacks 和 问题解决</title>
      <link>https://lsvking.github.io/88/</link>
      <pubDate>Sat, 23 Feb 2008 13:41:13 +0000</pubDate>
      
      <guid>https://lsvking.github.io/88/</guid>
      <description>&amp;#160; 这篇文章包括了8个非常有用的解决办法, 在进行css设计遇到问题时你就会用到它们.  ———————————————————————————————————————————–
目录  介绍 针对浏览器的选择器 让IE6支持PNG透明 移除超链接的虚线 给行内元素定义宽度 让固定宽度的页面居中 图片替换技术 最小宽度 隐藏水平滚动条  ———————————————————————————————————————————–
一. 介绍 这篇文章包括了8个非常有用的解决办法, 在进行css设计遇到问题时你就会用到它们.
二. 针对浏览器的选择器 这些选择器在你需要针对某款浏览器进行css设计时将非常有用.
IE6及其更低版本
 html {}  IE7及其更低版本
*:first-child+html {} * html {}
仅针对IE7
*:first-child+html {}
IE7和当代浏览器
html&amp;gt;body{}
仅当代浏览器(IE7不适用)
html&amp;gt;/**/body{}
Opera9及其更低版本
html:first-child {}
Safari
html[xmlns*=&amp;quot;&amp;quot;] body:last-child {}
要使用这些选择器,请将它们放在样式之前. 例如:
#content-box {
width: 300px;
height: 150px;
}
 html
#content-box {
width: 250px;
} /* overrides the above style and changes the width to 250px in IE 6 and below */  三.</description>
    </item>
    
    <item>
      <title>我做的一款清爽英文模板，适合做GGAD~</title>
      <link>https://lsvking.github.io/74/</link>
      <pubDate>Fri, 15 Feb 2008 16:20:50 +0000</pubDate>
      
      <guid>https://lsvking.github.io/74/</guid>
      <description>&amp;#160; 先看看效果图吧 这个是用来出售的模板，但看起来太简单了，估计没人会买，我就共享出来吧！
&amp;#160; 这个是首页  这个是列表页

这个是文章页 
本人做了一批英文模板有兴趣的可以去看看http://shop34694996.taobao.com/
同时本人接模板制作生意，中英文都可以，价格绝对优惠～
我的QQ:262532051
安装方法:把default放到templets下
index_files放到根目录
下载地址：
 模板包  </description>
    </item>
    
    <item>
      <title>100个优秀的免费 WordPress 主题</title>
      <link>https://lsvking.github.io/71/</link>
      <pubDate>Mon, 28 Jan 2008 16:10:21 +0000</pubDate>
      
      <guid>https://lsvking.github.io/71/</guid>
      <description>&lt;p&gt;   今天来转一篇伟大的文章，虽然我每一次转的文章都很伟大，这一篇写的确实让我佩服，收集这么多东西在一起是件十分费神的体力活，我这种懒人自然只会转啦，不说废话了，这100个主题都是英文的，我看了下里边也有咱们中国的，但不知道为什么做的都是英文的。&lt;/p&gt;
&lt;p&gt;我是从&lt;a href=&#34;http://jandan.net&#34;&gt;煎蛋&lt;/a&gt;先生那里看到的&lt;a href=&#34;http://jandan.net/2008/01/09/100-excellent-free-wordpress-themes.html&#34;&gt;这篇文章&lt;/a&gt;，他说原作者是&lt;a href=&#34;http://www.smashingmagazine.com/2008/01/08/100-excellent-free-high-quality-wordpress-themes/&#34;&gt;SmashingMagazine&lt;/a&gt;，我也不太认识这位先生，在这里就都谢过啦～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WordPress 2.4? 不，是 WordPress 2.5</title>
      <link>https://lsvking.github.io/68/</link>
      <pubDate>Sun, 06 Jan 2008 07:51:03 +0000</pubDate>
      
      <guid>https://lsvking.github.io/68/</guid>
      <description>WordPress 2.4 本来预计在 1 月 24 日发布，不过现在看来这是不可能了。Matt Mullenweg 在 WordPress Hackers 邮件列表 中指出，WordPress 2.4 将直接跳过，而下一个重要版本 WordPress 2.5 则将在 3 月 28 日发布。 下面是 Matt Mullenweg 在 WordPress Hackers 邮件列表中给出的信息。
In light of the big changes happening in the codebase and admin section, we’re going to push back the next release to be aimed for early March. This is the timeframe when 2.5 was originally schedule for, so we’re treating the originally planned 2.</description>
    </item>
    
  </channel>
</rss>
